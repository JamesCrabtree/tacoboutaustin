#start from node base image
FROM node 

# specifies production or testing mode API URL
ENV API_URL = "api.tacoboutaustin.me"

# less messages during Docker build
ENV NPM_CONFIG_LOGLEVEL warn 

# Allows app_env to be set during build (defaults to empty string)
ARG app_env                  

# sets an environment variable to app_env argument, so that variable will persist in container for use in node
ENV APP_ENV $app_env         

# creates folder to add code into
RUN mkdir -p /app   

# all commands will be run from this folder now
WORKDIR /app          

# copy code in local frontend directory into container's working directory
COPY ./app /app    
WORKDIR /app/frontend   

# install dependencies
RUN npm install
RUN npm install --save reactstrap@next react react-dom 
RUN npm install bootstrap reactstrap@next react-router-dom
RUN npm install --save-dev mocha

# Install Python dependencies (from Downing's site)
#FROM python:3.5.2
RUN apt-get update			&& \
	apt-get -y install cmake	&& \
	apt-get -y install graphviz	&& \
	apt-get -y install vim

# Install Python pre-reqs
RUN apt-get -y install python-pip	&& \
	apt-get -y install python-dev	&& \
	apt-get -y install build-essential && \
	apt-get -y install checkinstall && \
	apt-get -y install libreadline-gplv2-dev && \
	apt-get -y install libncursesw5-dev && \
	apt-get -y install libssl-dev && \
	apt-get -y install libsqlite3-dev && \
	apt-get -y install tk-dev && \
	apt-get -y install libgdbm-dev && \
	apt-get -y install libc6-dev && \
	apt-get -y install libbz2-dev

CMD /usr/src

RUN wget https://www.python.org/ftp/python/3.5.2/Python-3.5.2.tgz

RUN tar xzf Python-3.5.2.tgz

WORKDIR Python-3.5.2
RUN bash -c "./configure"
RUN bash -c "make"

RUN bash -c "make install" 


# RUN bash -c "alias python=python3 > ~/.bashrc"
# RUN bash -c "source ~/.bashrc"

RUN pip install --upgrade pip 	&& \
	pip --version 		&& \
	pip install autopep8 	&& \
	pip install coverage 	&& \
	#pip install mypy 	&& \
	pip install numpy 	&& \
	pip install pylint

# Delete Python compressed folder
RUN bash -c "cd ../"
RUN bash -c "rm -rf Python-3.5.2.tgz"

# RUN pip install Flask

# RUN pip install uwsgi

# # Set up Nginx
# ENV NGINX_VERSION 1.9.11-1~jessie

# RUN apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 \
# 	&& echo "deb http://nginx.org/packages/mainline/debian/ jessie nginx" >> /etc/apt/sources.list \
# 	&& apt-get update \
# 	&& apt-get install -y ca-certificates nginx=${NGINX_VERSION} gettext-base \
# 	&& rm -rf /var/lib/apt/lists/*
# forward request and error logs to docker log collector
# RUN ln -sf /dev/stdout /var/log/nginx/access.log \
# 	&& ln -sf /dev/stderr /var/log/nginx/error.log
# EXPOSE 80 443
# Finished setting up Nginx


# Make NGINX run on the foreground
# RUN echo "daemon off;" >> /etc/nginx/nginx.conf
# Remove default configuration from Nginx
# RUN rm /etc/nginx/conf.d/default.conf
# Copy the modified Nginx conf
# COPY nginx.conf /etc/nginx/conf.d/
# Copy the base uWSGI ini file to enable default dynamic uwsgi process number
# COPY uwsgi.ini /etc/uwsgi/


# Install Supervisord
# RUN apt-get update && apt-get install -y supervisor \
# && rm -rf /var/lib/apt/lists/*
# # Custom Supervisord config
# COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

#COPY ./app /app

# CMD ["/usr/bin/supervisord"]

#########################################

WORKDIR /app

# RUN pip install flask
# COPY nginx.conf /etc/nginx/conf.d/

COPY requirements.txt /tmp/

RUN pip install -U pip
RUN pip install -r /tmp/requirements.txt

# RUN apt-get install curl
# RUN curl -sL https://deb.nodesource.com/setup_6.x | bash
# RUN apt-get install nodejs
# RUN npm install
# RUN npm install --save reactstrap@next react react-dom 
# RUN npm install bootstrap reactstrap@next react-router-dom

#COPY ./app /app

WORKDIR /app/frontend   
# If the arg_env was set as production, then this will install http-server and build/service optimized static files
# Otherwise, uses create-react-app's hot reloading tool

# RUN npm run start
CMD if [ ${APP_ENV} = production ]; \
	then \
	npm install -g http-server && \
	npm run build && \
	cd build && \
	hs -p 3000; \
	else \
	npm run start; \
	fi

# app runs on port 3000 by default
EXPOSE 3000
